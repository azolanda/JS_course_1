"use strict";

/*
###Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся 
на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
Необходимо реализовать функцию newOrder. Создавать вспомогательные функции, 
коллекции, не запрещается. Старайтесь использовать коллекции Map/Set, где это 
актуально.

Повара и их специализации:
Олег - специализация: Пицца.
Андрей - специализация: Суши.
Анна - специализация: Десерты.

Блюда, которые могут заказать посетители:
Пицца "Маргарита"
Пицца "Пепперони"
Пицца "Три сыра"
Суши "Филадельфия"
Суши "Калифорния"
Суши "Чизмаки"
Суши "Сеякемаки"
Десерт Тирамису
Десерт Чизкейк
*/

function newOrder(client, ...orderItems){
  console.log("***********************************\n");
  console.log(`Клиент ${client.firstname} заказал:\n`);
  for(const orderItem of orderItems){
    let orderCook = null;
    if (menu.has(orderItem.name)){
      for(const item of cooks){
        if (item.specialization === orderItem.type){
          orderCook = item;
        }
      }
      if (orderCook === null){
        console.log(`Error! Специализации повара ${orderItem.type} не существует`);
      }
      console.log(`${orderItem.type} ${orderItem.name} - ${orderItem.quantity}; готовит повар ${orderCook?.name}` );
    } else {
      console.log("Такого наименования не существует");
    }
  }
}

const cooks = [
  {name: "Олег", specialization: "Пицца"},
  {name: "Андрей", specialization: "Суши"},
  {name: "Анна", specialization: "Десерт"}
];

const menu = new Map().set("Маргарита", "Пицца")
                      .set("Пепперони", "Пицца")
                      .set("Три сыра", "Пицца")
                      .set("Филадельфия", "Суши")
                      .set("Калифорния", "Суши")
                      .set("Чизмаки", "Суши")
                      .set("Сеякемаки", "Суши")
                      .set("Тирамису", "Десерт")
                      .set("Чизкейк", "Десерт");

newOrder(
  { firstname: "Иван", lastname: "Иванов" }, 
  { name: 'Маргарита', quantity: 1, type: "Пицца" },
  { name: 'Пепперони', quantity: 2, type: "Пицца" },
  { name: 'Чизкейк', quantity: 1, type: "Десерт" },
);
// Вывод:
// Клиент Иван заказал: 
// Пицца "Маргарита" - 1; готовит повар Олег
// Пицца "Пепперони" - 2; готовит повар Олег
// Десерт "Чизкейк" - 1; готовит повар Анна

// ---

const clientPavel = { firstname: "Павел", lastname: "Павлов" };
newOrder(
  clientPavel, 
  { name: 'Филадельфия', quantity: 5, type: "Суши" },
  { name: 'Калифорния', quantity: 3, type: "Суши" },
);
// Вывод:
// Клиент Иван заказал: 
// Суши "Филадельфия" - 5; готовит повар Андрей
// Суши "Калифорния" - 3; готовит повар Андрей

newOrder(
  clientPavel, 
  { name: 'Тирамису', quantity: 2, type: "Десерт" },
);
// Вывод:
// Клиент Иван заказал: 
// Суши "Филадельфия" - 5; готовит повар Андрей
// Суши "Калифорния" - 3; готовит повар Андрей
// Десерт "Тирамису" - 2; готовит повар Анна

newOrder(
  clientPavel, 
  { name: 'Трубочка с вареной сгущенкой', quantity: 1, type: "Десерт" },
);
// Вывод:
// Такого наименования не существует.